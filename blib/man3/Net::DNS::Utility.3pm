.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Utility 3"
.TH Net::DNS::Utility 3 "2008-05-06" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Net::DNS::Utility \- Perl extension that provides some basic DNS utility functions.  At this time most are related to IPv6.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::DNS::Utility;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net-DNS-Utility provides some basic functionality for the creation and management of \s-1DNS\s0 data.
Many of the routines at this time are focused on IPv6.
.PP
\&\fInew()\fR
Create a new Net::DNS::Utility object.
.PP
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
.PP
new(\s-1STRING\s0)
Create a new Net::DNS::Utility object.
.PP
my \f(CW$dnsUtil\fR = new Net::DNS::Utility(\*(L"2001:0db8:abcd:1234::1/64\*(R");
.PP
\&\s-1STRING\s0 is an IPv6 address and prefix length.
.PP
\&\fIaddressLength()\fR
This function is used to set the address/length attibute of this object.  This would be used to override the address/length attribute that is set when
constructed or if no address/length was supplied when the object was constructed.  Address/length passed in or if no argument specified currently
set address/length attribute is returned as a string.
.PP
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
\&\f(CW$dnsUtil\fR\->addressLength(\*(L"2001:0db8::/32\*(R");
.PP
\&\fIloadDebug()\fR
Accepts a Debug.pm object to facilitate initializa\-
tion of the debugging
.PP
use Debug;
use Net:DNS::Utility;
.PP
my \f(CW$debug\fR = new Debug; my \f(CW$IPv6Address\fR = new \fINet::IPv6Address()\fR;
\&\f(CW$IPv6Address\fR\->loadDebug($debug);
.PP
Debug.pm is a copy of valid Debug.pm object
.PP
createIp6ReverseZone(\s-1STRING1\s0, \s-1STRING2\s0)
Accepts two strings one prefix and one prefix length.  A string representation of the valid reverse zone is returned as a string.
The prefix must be fully uncompressed to ensure creation of a proper IPv6 reverse zone.
.PP
Net::IPv6Address can be used to facilitate the generation of a properly formatted prefix and prefix length for use with this function.
.PP
use Net::IPv6Address;
use Net::DNS::Utility;
use Debug;
.PP
my \f(CW$prefix\fR = \*(L"2001:0db8:1234:5678:90ef:0000:0000:ffff\*(R";
my \f(CW$prefixlen\fR = 64;
.PP
my \f(CW$debug\fR = new \fIDebug()\fR;
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
my \f(CW$IPv6address\fR = new Net::IPv6Address($prefix, \f(CW$prefixlen\fR);
.PP
$dnsUtil\->loadDebug($debug);
my \f(CW$ip6reverse\fR = \f(CW$dnsUtil\fR\->createIp6ReverseZone($IPv6address\->prefix, \f(CW$IPv6address\fR\->addressLength);
.PP
createBindNamedConf(\s-1STRING1\s0, \s-1STRING2\s0, \s-1STRING3\s0)
Used to create the stanza required for the provided IPv6 reverze zone.
Output is written to \s-1STDOUT\s0.
.PP
\&\s-1STRING1\s0 is the IPv6 reverse zone, \s-1STRING2\s0 is the prefix, and \s-1STRING3\s0 is the prefix length.
.PP
my \f(CW$prefix\fR = \*(L"2001:0db8:1234:5678:90ef:0000:0000:ffff\*(R";
my \f(CW$prefixlen\fR = 64;
.PP
my \f(CW$debug\fR = new \fIDebug()\fR;
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
my \f(CW$IPv6address\fR = new Net::IPv6Address($prefix, \f(CW$prefixlen\fR);
.PP
my \f(CW$ip6reverse\fR = \f(CW$dnsUtil\fR\->createIp6ReverseZone($IPv6address\->prefix, \f(CW$IPv6address\fR\->addressLength);
\&\f(CW$dnsUtil\fR\->createBindNamedConf($ip6reverse, \f(CW$IPv6address\fR\->prefix, \f(CW$IPv6address\fR\->addressLength);
.PP
createBindNamedDb(\s-1STRING1\s0, \s-1STRING2\s0, \s-1STRING3\s0)
Used to create an exmaple \s-1BIND\s0 \s-1DB\s0 file for the supplied IPv6 reverse zone.
A file is created with an automatically generated file name based on prefix and prefix length.
.PP
\&\s-1STRING1\s0 is the IPv6 reverse zone, \s-1STRING2\s0 is the prefix, and \s-1STRING3\s0 is the prefix length.
.PP
my \f(CW$prefix\fR = \*(L"2001:0db8:1234:5678:90ef:0000:0000:ffff\*(R";
my \f(CW$prefixlen\fR = 64;
.PP
my \f(CW$debug\fR = new \fIDebug()\fR;
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
my \f(CW$IPv6address\fR = new Net::IPv6Address($prefix, \f(CW$prefixlen\fR);
.PP
my \f(CW$ip6reverse\fR = \f(CW$dnsUtil\fR\->createIp6ReverseZone($IPv6address\->prefix, \f(CW$IPv6address\fR\->addressLength);
\&\f(CW$dnsUtil\fR\->createBindNamedDb($ip6reverse, \f(CW$IPv6address\fR\->prefix, \f(CW$IPv6address\fR\->addressLength);
.PP
createPtrData(\s-1STRING1\s0)
Used to generate the interface portion of a \s-1PTR\s0 record based on prefix and prefix length that have been provided.
A string is returned.
.PP
\&\s-1STRING1\s0 is the interface identifier portion of the IPv6 address.
.PP
my \f(CW$prefix\fR = \*(L"2001:0db8:1234:5678:90ef:0000:0000:ffff\*(R";
my \f(CW$prefixlen\fR = 64;
.PP
my \f(CW$debug\fR = new \fIDebug()\fR;
my \f(CW$dnsUtil\fR = new \fINet::DNS::Utility()\fR;
my \f(CW$IPv6address\fR = new Net::IPv6Address($prefix, \f(CW$prefixlen\fR);
.PP
$dnsUtil\->createPtrData($IPv6address\->interface);
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
N/A
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1JJMB\s0, <jjmb@jjmb.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008 by \s-1JJMB\s0
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
